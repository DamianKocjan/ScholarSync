// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Note {
    id          String        @id @default(cuid())
    title       String        @db.VarChar(250)
    description String?       @db.VarChar(500)
    sections    NoteSection[]
    user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt

    @@index([userId, title])
}

enum NoteSectionType {
    TEXT
    QUIZ
    IMAGE
    VIDEO
    AUDIO
    FILE
}

model NoteSection {
    id          String          @id @default(cuid())
    subtitle    String?         @db.VarChar(250)
    content     String?         @db.VarChar(5000)
    file        String?
    type        NoteSectionType @default(TEXT)
    index       Int             @default(0)
    note        Note            @relation(fields: [noteId], references: [id], onDelete: Cascade)
    noteId      String
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt
    quizAnswers QuizAnswer[]

    @@unique([noteId, index])
    @@index([noteId])
}

model QuizAnswer {
    id            String      @id @default(cuid())
    answer        String      @db.VarChar(250)
    isCorrect     Boolean     @default(false)
    noteSection   NoteSection @relation(fields: [noteSectionId], references: [id], onDelete: Cascade)
    noteSectionId String

    @@index([noteSectionId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    notes         Note[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
